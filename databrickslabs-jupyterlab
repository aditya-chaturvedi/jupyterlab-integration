#!/usr/bin/env python

import argparse
import base64
import json
import os
import sys
import uuid
from getpass import getpass
from subprocess import check_output
from enum import Enum

import pyperclip

import jupyter_core.command

import databrickslabs_jupyterlab
from databrickslabs_jupyterlab.remote import (get_db_config, get_cluster, connect, prepare_ssh_config, check_installed,
                                          get_remote_packages, is_reachable, create_kernelspec, install_libs,
                                          mount_sshfs, show_profiles, bye)


def conda_version():
    try:
        result = check_output(["conda", "--version"])
    except Exception as ex:
        print(ex)
        print("conda cannot be called. Is it properly installed?")
        sys.exit(1)

    result = result.strip().decode()
    return tuple([int(v) for v in result.split(" ")[1].split(".")])


def write_config():
    config = {"c.KernelManager.autorestart": False, "c.MappingKernelManager.kernel_info_timeout": 600}

    config_file = os.path.expanduser("~/.jupyter/jupyter_notebook_config.py")
    if os.path.exists(config_file):
        with open(config_file, "r") as fd:
            lines = fd.read().split("\n")

        with open(config_file, "w") as fd:
            for line in lines:
                kv = line.strip().split("=")
                if len(kv) == 2:
                    k, v = kv
                    if config.get(k, None) is not None:
                        fd.write("%s=%s\n" % (k, config[k]))
                        del config[k]
                    else:
                        fd.write("%s\n" % line)
            for k, v in config.items():
                fd.write("%s=%s\n" % (k, v))
    else:
        with open(config_file, "w") as fd:
            fd.write("\n".join(["%s=%s" % (k, v) for k, v in config.items()]))


def version_check():
    def normalize(key):
        return key.lower().replace("-", "_")

    packages = json.loads(check_output(["conda", "list", "--json"]))
    deps = {normalize(p["name"]): p["version"] for p in packages}

    remote_packages = get_remote_packages(cluster_id)
    remote_deps = {normalize(p["name"]): p["version"] for p in remote_packages}
    joint_keys = sorted(list(set(list(deps.keys()) + list(remote_deps.keys()))))
    print("%-30s %-10s%-10s" % ("Package", "local", "remote"))
    if str(args.versioncheck) == "all":
        scope = joint_keys
    elif str(args.versioncheck) == "same":
        scope = [key for key in joint_keys if deps.get(key, None) == remote_deps.get(key, None)]
    else:
        scope = [
            key for key in joint_keys if deps.get(key, None) != remote_deps.get(key, None)
#            and deps.get(key, None) is not None and remote_deps.get(key, None) is not None
        ]
    for key in scope:
        if deps.get(key) == remote_deps.get(key):
            print('\033[92m', end="")
        else:
            print('\033[91m', end="")
        print("%-30s %-10s  %-10s" % (key, deps.get(key, "--"), remote_deps.get(key, "--")))
        print('\033[0m', end="")


class VCheck(Enum):
    a = 'all'
    d = 'diff'
    s = 'same'

    def __str__(self):
        return self.value


parser = argparse.ArgumentParser(description='Configure remote Databricks access with Jupyter Lab')

parser.add_argument('profile', nargs='?', type=str, default="", help='A databricks-cli profile')
parser.add_argument('-c',
                    '--clipboard',
                    dest='clipboard',
                    action='store_true',
                    help='Copy the personal access token to the clipboard')
# parser.add_argument('-e', '--environment', dest='environment', help='Create a new environment')
parser.add_argument('-f',
                    '--force',
                    dest='force',
                    action='store_true',
                    help='Force remote installation of databrickslabs_jupyterlab package')
parser.add_argument('-i', '--id', dest='cluster_id', help='The cluster_id to avoid manual selection')
parser.add_argument('-k', '--kernelspec', dest='kernelspec', action='store_true', help='Create a kernel specification')
parser.add_argument('-l', '--lab', dest='lab', action='store_true', help='Safely start Jupyter Lab')
parser.add_argument('-o', '--organisation', dest='organisation', help='The organisation for Azure Databricks')
parser.add_argument('-p',
                    '--profiles',
                    dest='profiles',
                    action='store_true',
                    help='Show all databricks cli profiles and check SSH key')
parser.add_argument('-r',
                    '--reconfigure',
                    dest='reconfigure',
                    action='store_true',
                    help='Reconfigure cluster with id cluster_id')
parser.add_argument('-s', '--sshfs', dest='sshfs', action='store_true', help='Mount remote filesystem via sshfs')
parser.add_argument('-v',
                    '--versioncheck',
                    dest='versioncheck',
                    type=VCheck,
                    choices=list(VCheck),
                    help='Check version of local env with remote env')

args = parser.parse_args()

# if args.environment:
#     subprocess.call()

profile = args.profile

version = conda_version()
if version[1] >= 4 and version[2] >= 5:
    print("Valid version of conda detected: %s.%s.%s" % version)
else:
    print("Too old conda version:")
    print("Please update conda to at least 4.7.5")
    sys.exit(1)

module_path = os.path.dirname(databrickslabs_jupyterlab.__file__)

if args.profile == "" and not args.profiles:
    parser.print_help()
    print("\ndatabrickslabs-jupyterlab: error: the following arguments are required: profile\n")
    sys.exit(1)

if not args.profiles:
    print("\n* Getting host and token from .databrickscfg")
    host, token = get_db_config(profile)
    if ("azuredatabricks.net" in host) and args.kernelspec and not args.organisation:
        parser.print_help()
        print(
            "\ndatabrickslabs-jupyterlab: error: To configure an Azure Databricks cluster, the organization id (-o id) is required\n"
        )
        sys.exit(1)

if args.clipboard:
    pyperclip.copy(token)
    print("   => Personal access token copied to clipboard")

started = False
if args.kernelspec or args.reconfigure or args.lab or args.sshfs or args.versioncheck:
    print("\n* Select remote cluster")
    cluster_id, public_ip, cluster_name, started = get_cluster(profile, host, token, args.cluster_id)
    if cluster_name is None:
        print("databrickslabs-jupyterlab: error: cluster_id '%s' not found" % cluster_id)
        sys.exit(1)

    print("\n* Configuring ssh config for remote cluster")
    prepare_ssh_config(cluster_id, profile, public_ip)
    print("   => Testing whether cluster can be reached")
    if not is_reachable(public_dns=public_ip):
        print("Cannot connect to remote cluster. Please check:")
        print("- whether port 2200 is open in cloud security group")
        print("- whether VPN is enabled if you need one to connect to the cluster")
        sys.exit(1)

if args.kernelspec or args.reconfigure or args.lab:
    print("   => Check installed libraries")
    if args.force or not check_installed(cluster_id):
        packages = json.loads(check_output(["conda", "list", "--json"]))
        deps = {p["name"]: p["version"] for p in packages if p["name"] in ["ipywidgets", "sidecar"]}

        print("\n* Installing databrickslabs_jupyterlab, ipywidgets on remote driver")
        install_libs(cluster_id, module_path, ipywidets_version=deps["ipywidgets"], sidecar_version=deps["sidecar"])

if args.lab:
    import jupyterlab.labapp
    sys.argv = sys.argv[:1]
    print(sys.argv)
    jupyterlab.labapp.main()

if args.kernelspec:
    print("\n* Create remote kernel spec")
    create_kernelspec(profile, args.organisation, host, cluster_id, cluster_name)

    print("\n* Setting global config of jupyter lab (autorestart, timeout)")
    write_config()

if args.versioncheck:
    version_check()

if args.sshfs:
    print("\n* Mount remote filesystem to ./remotefs/%s", cluster_id)
    mount_sshfs(cluster_id)

if args.profiles:
    show_profiles()

print("")
